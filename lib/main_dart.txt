import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 5,
          title: const Text(
            'My Bag',
            style: TextStyle(
              color: Colors.black,
              fontSize: 30,
              fontWeight: FontWeight.w600,
            ),
          ),
          actions: [
            IconButton(
              icon: const Icon(
                Icons.search,
              ),
              onPressed: () {
                // Add your onPressed logic here
              },
              color: Colors.black,
              iconSize: 28,
            ),
          ],
        ),
        body: const ShoppingApp(),
      ),
    );
  }
}

class ShoppingApp extends StatefulWidget {
  const ShoppingApp({Key? key}) : super(key: key);

  @override
  ShoppingAppState createState() => ShoppingAppState();
}

class ShoppingAppState extends State<ShoppingApp> {
  List<int> quantities = [1, 1, 1]; // Initialize with default quantities
  double totalPrice = 0.0;

  void updateTotalPrice() {
    double total = 0.0;
    for (int i = 0; i < quantities.length; i++) {
      total += quantities[i] * getItemPrice(i);
    }

    setState(() {
      totalPrice = total;
    });
  }

  double getItemPrice(int index) {
    switch (index) {
      case 0:
        return 51.0;
      case 1:
        return 30.0;
      case 2:
        return 43.0;
      default:
        return 0.0;
    }
  }

  @override
  void initState() {
    super.initState();
    // Initialize total price with the sum of default quantities for each item
    updateTotalPrice();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Expanded(
          child: SingleChildScrollView(
            child: Column(
              children: [
                ProductCard(
                  itemName: 'Pullover',
                  unitPrice: 51.0,
                  color: 'Black',
                  size: 'L',
                  image: 'pullover',
                  quantity: quantities[0],
                  updateTotalPrice: updateTotalPrice,
                  updateQuantity: (value) {
                    if (value > 0 && value <= 15) {
                      Future.delayed(Duration.zero, () {
                        setState(() {
                          quantities[0] = value;
                          updateTotalPrice();
                          if (value == 5) {
                            showAddedToBagDialog('Pullover', value);
                          }
                        });
                      });
                    }
                  },
                ),
                ProductCard(
                  itemName: 'T-Shirt',
                  unitPrice: 30.0,
                  color: 'Grey',
                  size: 'L',
                  image: 'tshirt',
                  quantity: quantities[1],
                  updateTotalPrice: updateTotalPrice,
                  updateQuantity: (value) {
                    if (value > 0 && value <= 15) {
                      Future.delayed(Duration.zero, () {
                        setState(() {
                          quantities[1] = value;
                          updateTotalPrice();
                          if (value == 5) {
                            showAddedToBagDialog('T-Shirt', value);
                          }
                        });
                      });
                    }
                  },
                ),
                ProductCard(
                  itemName: 'Sport Dress',
                  unitPrice: 43.0,
                  color: 'Black',
                  size: 'M',
                  image: 'sportdress',
                  quantity: quantities[2],
                  updateTotalPrice: updateTotalPrice,
                  updateQuantity: (value) {
                    if (value > 0 && value <= 15) {
                      Future.delayed(Duration.zero, () {
                        setState(() {
                          quantities[2] = value;
                          updateTotalPrice();
                          if (value == 5) {
                            showAddedToBagDialog('Sport Dress', value);
                          }
                        });
                      });
                    }
                  },
                ),
              ],
            ),
          ),
        ),
        TotalPriceRow(totalPrice: totalPrice),
        CheckoutButton(
            onCheckout: () => showSnackbar(
                context, 'Congratulations! Your order has been placed.')),
      ],
    );
  }

  void showSnackbar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
      ),
    );
  }

  void showAddedToBagDialog(String itemName, int quantity) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Congratulation!'),
          content: Text("You have added $quantity $itemName's on your bag!"),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
              },
              child: Text(
                'OKAY',
                style: TextStyle(
                  background: Paint()
                    ..strokeWidth = 30
                    ..color = Colors.red
                    ..strokeJoin = StrokeJoin.round
                    ..strokeCap = StrokeCap.round
                    ..style = PaintingStyle.stroke,
                  fontSize: 20,
                  color: Colors.white,
                ),
              ),
            ),
          ],
        );
      },
    );
  }
}

class ProductCard extends StatefulWidget {
  final String itemName;
  final double unitPrice;
  final String color;
  final String size;
  final String image;
  final int quantity;
  final Function updateTotalPrice;
  final Function(int) updateQuantity;

  const ProductCard({
    Key? key,
    required this.itemName,
    required this.unitPrice,
    required this.color,
    required this.size,
    required this.image,
    required this.quantity,
    required this.updateTotalPrice,
    required this.updateQuantity,
  }) : super(key: key);

  @override
  ProductCardState createState() => ProductCardState();
}

class ProductCardState extends State<ProductCard> {
  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  width: 100,
                  height: 100,
                  color: Colors.grey,
                  child: Image.asset(
                      'assets/images/${widget.image.toLowerCase()}.png'),
                ),
                const SizedBox(width: 10),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.itemName,
                      style: const TextStyle(
                          fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Row(
                      children: [
                        Text('Color: ${widget.color}'),
                        const SizedBox(width: 10),
                        Text('Size: ${widget.size}'),
                      ],
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Row(
                          children: [
                            IconButton(
                              icon: const Icon(Icons.remove),
                              onPressed: () {
                                if (widget.quantity > 1) {
                                  widget.updateQuantity(widget.quantity - 1);
                                }
                              },
                            ),
                            Text('${widget.quantity}'),
                            IconButton(
                              icon: const Icon(Icons.add),
                              onPressed: () {
                                if (widget.quantity < 15) {
                                  widget.updateQuantity(widget.quantity + 1);
                                  if (widget.quantity == 5) {
                                    // Show dialog or perform other actions if needed
                                  }
                                }
                              },
                            ),
                            const SizedBox(width: 40),
                            Text(
                              'Price: \$${(widget.quantity * widget.unitPrice).toStringAsFixed(2)}',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 5),
          ],
        ),
      ),
    );
  }
}

class TotalPriceRow extends StatelessWidget {
  final double totalPrice;

  const TotalPriceRow({
    Key? key,
    required this.totalPrice,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      color: Colors.blue[100],
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          const Text(
            'Total Price:',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          Text(
            '\$${totalPrice.toStringAsFixed(2)}',
            style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }
}

class CheckoutButton extends StatelessWidget {
  final VoidCallback onCheckout;

  const CheckoutButton({Key? key, required this.onCheckout}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.all(16),
      child: ElevatedButton(
        onPressed: onCheckout,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.red.shade400,
          padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 12),
          textStyle: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
        child: const Text(
          'CHECK OUT',
          style: TextStyle(color: Colors.black),
        ),
      ),
    );
  }
}
